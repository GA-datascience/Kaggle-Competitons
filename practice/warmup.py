# Kaggle competition warm up 
# Quora question pairs 


#================================================
# importing libraries 


import numpy as np 
import pandas as pd 
import os # read or open file 
import gc 
import matplotlib.pyplot as plt 
import seaborn as sns # statistical visualization 

#==============================================


%matplotlib inline

pal = sns.color_palette() # for color selection later on :)

#=============================================== 
# training set (data import)




df_train = pd.read_csv('train.csv')

# view the top few to see the structure of the data 
df_train.head()


#===========================================================================
# more in depth structure 

# number of elements (length ) 
print('Total number of question pairs for training: {}'.format(len(df_train)))

# find out which elements have is_duplicate column =1 
# taking the .mean = the number of trues out of the entire samples 
print('Duplicate pairs: {}%'.format(round(df_train['is_duplicate'].mean()*100, 2)))

qids = pd.Series(df_train['qid1'].tolist() + df_train['qid2'].tolist())
# take out unique number 
print('Total number of questions in the training data: {}'.format(len(
    np.unique(qids))))
print('Number of questions that appear multiple times: {}'.format(np.sum(qids.value_counts() > 1)))




#===========================================================
#Histogram 


# we can see that from the histogram that there is one question that appears 160 times 
plt.figure(figsize=(12, 5))
plt.hist(qids.value_counts(), bins=50)
plt.yscale('log', nonposy='clip')
plt.title('Log-Histogram of question appearance counts')
plt.xlabel('Number of occurences of question')
plt.ylabel('Number of questions')
print()



#===========================================================
# Attempt to fit the mean prob of duplicates of our train set to our test set. 

# submission 1 

from sklearn.metrics import log_loss

# p is what we computed earlier 
# p = prob of duplicates in train set, 36%
# log loss tells us the score of our method 

p = df_train['is_duplicate'].mean()
print('Predicted score:', log_loss(df_train['is_duplicate'], np.zeros_like(df_train['is_duplicate']) + p))


# now time to import the test test 
df_test = pd.read_csv('test.csv')

# format is pd.DataFrame({})
# inside 'title': data , 'title of var': data
firstsub = pd.DataFrame({'test_id':df_test['test_id'],'is_duplicate':p})
firstsub.head()
# output this csv
firstsub.to_csv('first_submission.csv', index=False)

#============================================================================
# taking a look at the test set 

df_test.head()

print('total number of question pairs for testing:{}'.format(len(df_test)))

# wow we have nearly 2 million question pairs!! 
# but the actual questions are lower since most are randomly generated by kaggle to 
# prevent hand labellng (cheating)


#===========================================================================
# Text analysis (on the train set)
# character count analysis and word count analysis


# Now we will want to list all the questions out. 
# * note: panda series list elements out and we want to make them string. (as type)
train_qs = pd.Series(df_train['question1'].tolist() + df_train['question2'].tolist()).astype(str)

test_qs = pd.Series(df_test['question1'].tolist() + df_test['question2'].tolist()).astype(str)




# character count analysis --------------------------------------------------------
# apply len on each row. number of characters for each question
dist_train = train_qs.apply(len)
dist_test = test_qs.apply(len)


# time to plot some visuals

# * notes: normed is normalized the y axis. i.e [0 to 1]

plt.figure(figsize=(15,10))
plt.hist(dist_train, bins=200, range=[0,200], color=pal[2], normed=True, label='train')
plt.hist(dist_test, bins=200, range=[0,200], color=pal[1], normed=True, label = 'test')
plt.title('Normalised histogram of character count for all questions', fontsize = 20)
plt.legend()
plt.xlabel('Number of characters', fontsize=15)
plt.ylabel('Probability')

# some statistics of the data 
print('mean-train {:.2f} std-train {:.2f} mean-test {:.2f} std-test {:.2f} max-train {:.2f} max-test {:.2f}'.format(dist_train.mean(), 
                          dist_train.std(), dist_test.mean(), dist_test.std(), dist_train.max(), dist_test.max()))


# some comments: 
# we can see that from both of the test set, the average number of characters lies around 60 characters 
# Very rare are there questions exceeding 150-200 characters. 
#-----------------------------------------


# words count analysis 

# remove spaces 
dist_train_word = train_qs.apply(lambda x: len(x.split(' ')))
dist_test_word = test_qs.apply(lambda x: len(x.split(' ')))

# time to plot 

plt.figure(figsize=(15,10))
plt.hist(dist_train_word, bins=50, normed=True, color= pal[4], range= [0,50], label='train')
plt.hist(dist_test_word, bins=50, normed=True, color = pal[5], range=[0,50], label = 'test')
plt.legend()
plt.title('Normlized histogram of word count of questions', fontsize = 20)
plt.xlabel('Word count')
plt.ylabel('Probability')

print('mean-train {:.2f} std-train {:.2f} mean-test {:.2f} std-test {:.2f} max-train {:.2f} max-test {:.2f}'.format(dist_train_word.mean(), 
                          dist_train_word.std(), dist_test_word.mean(), dist_test_word.std(), dist_train_word.max(), dist_test_word.max()))


# comments: we can see that lies around 10, with some outlier being at 200(?) Both have similar distribution


#Word cloud analysis-----------------------------------------------

from wordcloud import WordCloud

the_word_cloud = WordCloud().generate(' '.join(train_qs.astype(str)))

# now to plot the word cloud 
plt.figure(figsize = (20,15))
plt.imshow(the_word_cloud)
plt.axis('off')


#Semantic analysis 

# Taking a look at the 

