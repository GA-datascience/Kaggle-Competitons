# Kaggle competition warm up 
# Quora question pairs 


#================================================
# importing libraries 


import numpy as np 
import pandas as pd 
import os # read or open file 
import gc 
import matplotlib.pyplot as plt 
import seaborn as sns # statistical visualization 
%matplotlib inline
pal = sns.color_palette() # for color selection later on :)

#=============================================== 
# All data import and manipulation 
#
# To make things easier, I will 
df_train = pd.read_csv('train.csv')
df_test = pd.read_csv('test.csv')




#===========================================================================
#1 More in depth structure 




# view the top few to see the structure of the data 
df_train.head()

# number of elements (length ) 
print('Total number of question pairs for training: {}'.format(len(df_train)))

# find out which elements have is_duplicate column =1 
# taking the .mean = the number of trues out of the entire samples 
print('Duplicate pairs: {}%'.format(round(df_train['is_duplicate'].mean()*100, 2)))

qids = pd.Series(df_train['qid1'].tolist() + df_train['qid2'].tolist())
# take out unique number 
print('Total number of questions in the training data: {}'.format(len(
    np.unique(qids))))
print('Number of questions that appear multiple times: {}'.format(np.sum(qids.value_counts() > 1)))





#Histogram 


# we can see that from the histogram that there is one question that appears 160 times 
plt.figure(figsize=(12, 5))
plt.hist(qids.value_counts(), bins=50)
plt.yscale('log', nonposy='clip')
plt.title('Log-Histogram of question appearance counts')
plt.xlabel('Number of occurences of question')
plt.ylabel('Number of questions')
print()



#===========================================================
#2 Attempt to fit the mean prob of duplicates of our train set to our test set. 

# submission 1 

from sklearn.metrics import log_loss

# p is what we computed earlier 
# p = prob of duplicates in train set, 36%
# log loss tells us the score of our method 

p = df_train['is_duplicate'].mean()
print('Predicted score:', log_loss(df_train['is_duplicate'], np.zeros_like(df_train['is_duplicate']) + p))



# format is pd.DataFrame({})
# inside 'title': data , 'title of var': data

firstsub = pd.DataFrame({'test_id':df_test['test_id'],'is_duplicate':p})
firstsub.head()
# output this as csv
firstsub.to_csv('first_submission.csv', index=False)


# taking a look at the test set 
#
df_test.head()

print('total number of question pairs for testing:{}'.format(len(df_test)))

# wow we have nearly 2 million question pairs!! 
# but the actual questions are lower since most are randomly generated by kaggle to 
# prevent hand labellng (cheating)


#===========================================================================
#3 Text analysis (on the train set)
# 
# 1. character count analysis 
# 2. word count analysis 
# 3. word cloud 
# 4. semantic analysis 
# 5. stopwords analysis 
# 6. TF-IDF 


# Now we will want to list all the questions out. 
# * note: panda series list elements out and we want to make them string. (as type) 
# * note: astype is for series 
train_qs = pd.Series(df_train['question1'].tolist() + df_train['question2'].tolist()).astype(str)

test_qs = pd.Series(df_test['question1'].tolist() + df_test['question2'].tolist()).astype(str)




# character count analysis --------------------------------------------------------
# apply len on each row. number of characters for each question
dist_train = train_qs.apply(len)
dist_test = test_qs.apply(len)


# time to plot some visuals

# * notes: normed is normalized the y axis. i.e [0 to 1]

plt.figure(figsize=(15,10))
plt.hist(dist_train, bins=200, range=[0,200], color=pal[2], normed=True, label='train')
plt.hist(dist_test, bins=200, range=[0,200], color=pal[1], normed=True, label = 'test')
plt.title('Normalised histogram of character count for all questions', fontsize = 20)
plt.legend()
plt.xlabel('Number of characters', fontsize=15)
plt.ylabel('Probability')

# some statistics of the data 
print('mean-train {:.2f} std-train {:.2f} mean-test {:.2f} std-test {:.2f} max-train {:.2f} max-test {:.2f}'.format(dist_train.mean(), 
                          dist_train.std(), dist_test.mean(), dist_test.std(), dist_train.max(), dist_test.max()))


# some comments: 
# we can see that from both of the test set, the average number of characters lies around 60 characters 
# Very rare are there questions exceeding 150-200 characters. 



# words count analysis  --------------------------------------------------------

# remove spaces 
# lamda apply do properly to each row 
dist_train_word = train_qs.apply(lambda x: len(x.split(' ')))
dist_test_word = test_qs.apply(lambda x: len(x.split(' ')))

# time to plot 

plt.figure(figsize=(15,10))
plt.hist(dist_train_word, bins=50, normed=True, color= pal[4], range= [0,50], label='train')
plt.hist(dist_test_word, bins=50, normed=True, color = pal[5], range=[0,50], label = 'test')
plt.legend()
plt.title('Normlized histogram of word count of questions', fontsize = 20)
plt.xlabel('Word count')
plt.ylabel('Probability')

print('mean-train {:.2f} std-train {:.2f} mean-test {:.2f} std-test {:.2f} max-train {:.2f} max-test {:.2f}'.format(dist_train_word.mean(), 
                          dist_train_word.std(), dist_test_word.mean(), dist_test_word.std(), dist_train_word.max(), dist_test_word.max()))


# comments: we can see that lies around 10, with some outlier being at 200(?) Both have similar distribution


#Word cloud analysis-----------------------------------------------

from wordcloud import WordCloud


# A fix format for doing word cloud in python


the_word_cloud = WordCloud().generate(' '.join(train_qs.astype(str)))
# now to plot the word cloud 
plt.figure(figsize = (20,15))
plt.imshow(the_word_cloud)
plt.axis('off')


#Semantic analysis  --------------------------------------------------------

# Taking a look at the punctuation in the questions. 
# using .apply lambda function  

question_marks = np.mean(train_qs.apply(lambda x: '?' in x))
math = np.mean(train_qs.apply(lambda x: '[math]' in x)) # check if there are math equations 
fullstop = np.mean(train_qs.apply(lambda x: '.' in x)) 

capital_first = np.mean(train_qs.apply(lambda x: x[0].isupper())) 
capitals = np.mean(train_qs.apply(lambda x: max([y.isupper() for y in x]) )) # for each x, [true, false , false, ...etc] then we take the max 
numbers = np.mean(train_qs.apply(lambda x: max([y.isdigit() for y in x])))

print('Questions with question marks: {:.2f}%'.format(qmarks * 100))
print('Questions with [math] tags: {:.2f}%'.format(math * 100))
print('Questions with full stops: {:.2f}%'.format(fullstop * 100))
print('Questions with capitalised first letters: {:.2f}%'.format(capital_first * 100))
print('Questions with capital letters: {:.2f}%'.format(capitals * 100))
print('Questions with numbers: {:.2f}%'.format(numbers * 100))



# Using ntlk, initial feature analysis  --------------------------------------------------------
# import nltk 
# nltk.download()
# under corpus > choose stopwords to install it 


from nltk.corpus import stopwords

# preset a set of stopwords from the corpus database which we will use later, 153 stopwords 
stops = set(stopwords.words("english"))




# Very powerful function written: To give proportion of shared words without the stopwords 
# 
# This function only applies to 1 question pair of 1 row. *


def word_match_share(row):
    # define dictionary. recall dictionary maps key + value {key:value, key:value} and we call the q1words['key'] = value  
    q1words = {}
    q2words = {}
    
    
    # row is a mini dataframe for later 
    # .lower.split change all to lower and split each words into list object 
    # so for each element in the list, if the word is not in stop set, we place it in the dictonary q1words
    # q1words contains all the non stop words in q1 
    # q2words contains all the non stop words in q2 
    
    for word in str(row['question1']).lower().split(): 
        if word not in stops: 
            q1words[word] = 1 
    # do the same for q2 
    for word in str(row['question2']).lower().split(): 
        if word not in stops:
            q2words[word] = 1
    
    # conisder the case where the entire sentence is all stopwords 
    # we want to return 0 because if q1words or q2words is 0, there is no point continuing 
    if len(q1words) == 0 or len(q2words) == 0 :
        return 0
    # find the proportion of shared words between q1 and q2 out of the whole question     
    # recall, q1words is dictionary, key value pair. we want the keys only 
    # add them into shared_words_q1 as a list 
    shared_words_q1 = [word for word in q1words.keys() if word in q2words.keys()]
    shared_words_q2 = [word for word in q2words.keys() if word in q1words.keys()]   
    R = (len(shared_words_q1) + len(shared_words_q2))/(len(q1words) + len(q2words))
    return R 
    


    
# using the function we created above 
# * note: apply takes in argument of function and apply it to every row (axis = 1)
# default axis = 0 ( every column) 

# list of every question pair in train set and the proportion of shared words 
word_match_trainset = df_train.apply(word_match_share, axis = 1, raw=True)

      
# time to plot the thing out! 

plt.figure(figsize = (15,5))        
# take out the idex of those with is_duplicate == 0
plt.hist(word_match_trainset[df_train['is_duplicate']== 0], bins= 20, normed= True, label= 'no duplicate')
plt.hist(word_match_trainset[df_train['is_duplicate']== 1], bins= 20, normed= True, label= 'is duplicate', alpha = 0.7)
plt.legend()
plt.title('Train set: Duplicate vs no duplicate, proportion of shared words', fontsize =15)
plt.xlabel('Proportion of shared words', fontsize = 15)        

# comments: We can see that for question pairs that are not the same type of questions, they tend to have 
# less shared words as compared to question pairs that are the same! 
# There is indeed some link to shared words to how similar the questions are. 
# If we are asking the same type of questions, it is highly likely there are a larger proportion of 
# shared words :) 
    
    
        
        